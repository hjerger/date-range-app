{"version":3,"sources":["DateRangePicker.tsx","reportWebVitals.ts","index.tsx"],"names":["BasicDateRangePicker","React","useState","value","setValue","Date","startTime","setStartTime","endTime","setEndTime","open","setOpen","timezone","format","useEffect","className","LocalizationProvider","dateAdapter","AdapterDateFns","DateRangePicker","startText","endText","onChange","newValue","renderInput","startProps","endProps","Fragment","TextField","size","sx","width","Box","mx","TimePicker","label","newTime","params","PopperProps","placement","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAYe,SAASA,IAAwB,IAAD,EACnBC,IAAMC,SAA0B,CAAC,KAAM,OADpB,mBACtCC,EADsC,KAC/BC,EAD+B,OAGXH,IAAMC,SACtC,IAAIG,KAAK,6BAJkC,mBAGtCC,EAHsC,KAG3BC,EAH2B,OAMfN,IAAMC,SAClC,IAAIG,KAAK,6BAPkC,mBAMtCG,EANsC,KAM7BC,EAN6B,OASrBP,oBAAS,GATY,mBAStCQ,EATsC,KAShCC,EATgC,KAWvCC,EAAW,IAAMC,YAAO,IAAIR,KAAQ,eAAiB,IAM3D,OAJAS,qBAAU,WACRH,GAAQ,KACP,IAGD,8BACE,qBAAKI,UAAU,mBAAf,SACE,cAACC,EAAA,EAAD,CAAsBC,YAAaC,IAAnC,SACE,cAACC,EAAA,EAAD,CAEEC,UAAU,aACVC,QAAQ,WACRlB,MAAOA,EACPmB,SAAU,SAACC,GACTnB,EAASmB,IAEXC,YAAa,SAACC,EAAYC,GAAb,OACX,cAAC,IAAMC,SAAP,UACE,sBAAKZ,UAAU,aAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,cAACa,EAAA,EAAD,2BACMH,GADN,IAEEI,KAAM,QACNC,GAAI,CAAEC,MAAO,QAEf,cAACC,EAAA,EAAD,CAAKF,GAAI,CAAEG,GAAI,IAAf,kBACA,cAACL,EAAA,EAAD,2BACMF,GADN,IAEEG,KAAM,QACNC,GAAI,CAAEC,MAAO,WAGjB,sBAAKhB,UAAU,iBAAf,UACE,cAACC,EAAA,EAAD,CAAsBC,YAAaC,IAAnC,SACE,cAACgB,EAAA,EAAD,CACEC,MAAO,cAAgBvB,EACvBT,MAAOG,EACPgB,SAAU,SAACc,GACT7B,EAAa6B,IAEfZ,YAAa,SAACa,GAAD,OACX,cAACT,EAAA,EAAD,2BACMS,GADN,IAEER,KAAM,QACNC,GAAI,CAAEC,MAAO,SAGjBO,YAAa,CACXC,UAAW,oBAIjB,cAACvB,EAAA,EAAD,CAAsBC,YAAaC,IAAnC,SACE,cAACgB,EAAA,EAAD,CACEC,MAAO,YAAcvB,EACrBT,MAAOK,EACPc,SAAU,SAACc,GACT3B,EAAW2B,IAEbZ,YAAa,SAACa,GAAD,OACX,cAACT,EAAA,EAAD,2BACMS,GADN,IAEER,KAAM,QACNC,GAAI,CAAEC,MAAO,SAGjBO,YAAa,CACXC,UAAW,6BAQzB7B,KAAMA,EACN4B,YAAa,CACXC,UAAW,kBCpGzB,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0f8b3bfb.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { format } from \"date-fns\";\nimport TextField from \"@mui/material/TextField\";\nimport DateRangePicker, { DateRange } from \"@mui/lab/DateRangePicker\";\nimport StaticDateRangePicker from \"@mui/lab/StaticDateRangePicker\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport Box from \"@mui/material/Box\";\nimport TimePicker from \"@mui/lab/TimePicker\";\n\nimport \"./App.css\";\n\nexport default function BasicDateRangePicker() {\n  const [value, setValue] = React.useState<DateRange<Date>>([null, null]);\n  //const [time, setTime] = React.useState<React.SetStateAction<DateRange<Date>>>({});\n  const [startTime, setStartTime] = React.useState<Date | null>(\n    new Date(\"2018-01-01T00:00:00.000Z\")\n  );\n  const [endTime, setEndTime] = React.useState<Date | null>(\n    new Date(\"2018-01-01T00:00:00.000Z\")\n  );\n  const [open, setOpen] = useState(false);\n\n  const timezone = \"(\" + format(new Date(), \"'UTC' xxxxx\") + \")\";\n\n  useEffect(() => {\n    setOpen(true);\n  }, []);\n\n  return (\n    <div>\n      <div className=\"rangePickerPanel\">\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\n          <DateRangePicker\n            //displayStaticWrapperAs=\"desktop\"\n            startText=\"Start Date\"\n            endText=\"End Date\"\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            renderInput={(startProps, endProps) => (\n              <React.Fragment>\n                <div className=\"fieldPanel\">\n                  <div className=\"dateFieldPanel\">\n                    <TextField\n                      {...startProps}\n                      size={\"small\"}\n                      sx={{ width: 300 }}\n                    />\n                    <Box sx={{ mx: 14 }}> to </Box>\n                    <TextField\n                      {...endProps}\n                      size={\"small\"}\n                      sx={{ width: 300 }}\n                    />\n                  </div>\n                  <div className=\"timeFieldPanel\">\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                      <TimePicker\n                        label={\"Start Time \" + timezone}\n                        value={startTime}\n                        onChange={(newTime) => {\n                          setStartTime(newTime);\n                        }}\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            size={\"small\"}\n                            sx={{ width: 300 }}\n                          />\n                        )}\n                        PopperProps={{\n                          placement: \"bottom-start\",\n                        }}\n                      />\n                    </LocalizationProvider>\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                      <TimePicker\n                        label={\"End Time \" + timezone}\n                        value={endTime}\n                        onChange={(newTime) => {\n                          setEndTime(newTime);\n                        }}\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            size={\"small\"}\n                            sx={{ width: 300 }}\n                          />\n                        )}\n                        PopperProps={{\n                          placement: \"bottom-start\",\n                        }}\n                      />\n                    </LocalizationProvider>\n                  </div>\n                </div>\n              </React.Fragment>\n            )}\n            open={open}\n            PopperProps={{\n              placement: \"bottom\",\n            }}\n          />\n        </LocalizationProvider>\n      </div>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./DateRangePicker\";\n// import App from \"./RangePicker\";\n// import App from \"./DatePicker\";\n// import App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}